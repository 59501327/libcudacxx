/*

Copyright (c) 2018, NVIDIA Corporation
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#include <memory> // I don't understand what gets corrupted if I don't include this

#pragma push_macro("_LIBCPP_NO_AUTO_LINK")
#define _LIBCPP_NO_AUTO_LINK

#ifndef __CONFIG_ONCE
    #define __CONFIG_ONCE
    #pragma push_macro("_LIBCPP_CONFIG")
    #undef _LIBCPP_CONFIG
    #ifdef _NOEXCEPT
    #undef _NOEXCEPT
    #endif
    #include "../libcxx/include/__config"
    #pragma pop_macro("_LIBCPP_CONFIG")
#endif

#pragma push_macro("_LIBCPP_BEGIN_NAMESPACE_STD_NOVERSION")
#pragma push_macro("_LIBCPP_END_NAMESPACE_STD_NOVERSION")
#pragma push_macro("_LIBCPP_CONSTEXPR")
#pragma push_macro("_LIBCPP_HAS_GCC_ATOMIC_IMP")
#pragma push_macro("_LIBCPP_HAS_NO_INT128")
#pragma push_macro("_LIBCPP_BEGIN_NAMESPACE_STD")
#pragma push_macro("_LIBCPP_END_NAMESPACE_STD")
#pragma push_macro("_LIBCPP_INLINE_VISIBILITY")
#pragma push_macro("_VSTD")
#pragma push_macro("_LIBCPP_NO_RTTI")
#pragma push_macro("_LIBCPP_NO_EXCEPTIONS")
#pragma push_macro("USE_DETAILS_CONFIG")

#define _LIBCPP_CONSTEXPR constexpr
#define _LIBCPP_HAS_GCC_ATOMIC_IMP

#undef _LIBCPP_HAS_NO_INT128
#define _LIBCPP_HAS_NO_INT128

#undef _LIBCPP_NO_RTTI
#define _LIBCPP_NO_RTTI

#undef _LIBCPP_NO_EXCEPTIONS
#define _LIBCPP_NO_EXCEPTIONS

#undef _LIBCPP_BEGIN_NAMESPACE_STD
#undef _LIBCPP_END_NAMESPACE_STD

#ifdef GPU_STD_DETAILS
    #define _LIBCPP_BEGIN_NAMESPACE_STD \
        namespace gpu { namespace std { namespace details { inline namespace v1 {
    #define _LIBCPP_END_NAMESPACE_STD } } } }
#else
    #define _LIBCPP_BEGIN_NAMESPACE_STD \
        namespace gpu { namespace std { inline namespace v1 {
    #define _LIBCPP_END_NAMESPACE_STD } } }
#endif

#define _LIBCPP_BEGIN_NAMESPACE_STD_NOVERSION namespace gpu { namespace std {
#define _LIBCPP_END_NAMESPACE_STD_NOVERSION { {

#undef _LIBCPP_INLINE_VISIBILITY
#define _LIBCPP_INLINE_VISIBILITY __host__ __device__
#ifdef __CUDACC__
    #if defined(__clang__)
        #include <cuda_fp16.h>
        #define __fp16 __half
    #endif
    #if defined(__FLT16_MANT_DIG__)
        #include <cuda_fp16.h>
        #define _Float16 __half
    #endif
#else
    #define __host__
    #define __device__
#endif

#undef _VSTD
#define _VSTD gpu::std::v1

#define USE_DETAILS_CONFIG
