//===----------------------------------------------------------------------===//
//
// Part of the CUDA Toolkit, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _CUDA_EXCEPTION
#define _CUDA_EXCEPTION

#include <exception>

#include "detail/__config"

_LIBCPP_BEGIN_NAMESPACE_STD

    using exception = ::std::exception;
    using bad_exception = ::std::bad_exception;
    using nested_exception = ::std::nested_exception;

    using unexpected_handler = ::std::unexpected_handler;
    inline unexpected_handler get_unexpected() noexcept {
        return ::std::get_unexpected(); }
    inline unexpected_handler set_unexpected(unexpected_handler __f) noexcept  {
        return ::std::set_unexpected(__f); }
    [[noreturn]] inline void unexpected() {
        ::std::unexpected(); }

    using terminate_handler = ::std::terminate_handler;
    inline terminate_handler get_terminate() noexcept {
        return ::std::get_terminate(); }
    inline terminate_handler set_terminate(terminate_handler __f) noexcept {
        return ::std::set_terminate(__f); }
    [[noreturn]] inline void terminate() noexcept {
        ::std::terminate(); }

    inline bool uncaught_exception() noexcept {
        return ::std::uncaught_exception(); }

    using exception_ptr = ::std::exception_ptr;
    inline exception_ptr current_exception() noexcept {
        return ::std::current_exception(); }
    [[noreturn]] inline void rethrow_exception(exception_ptr __p) {
        ::std::rethrow_exception(__p); }
    template<class _Ex> inline exception_ptr make_exception_ptr(_Ex __e) noexcept {
        return ::std::make_exception_ptr(__e); }

    template <class _Tp> [[noreturn]] inline void throw_with_nested(_Tp&& __t) {
        ::std::throw_with_nested(__t); }
    template <class _Ex> inline void rethrow_if_nested(const _Ex& __e) {
        ::std::rethrow_if_nested(__e); }

_LIBCPP_END_NAMESPACE_STD

#endif //_CUDA_EXCEPTION
