//===----------------------------------------------------------------------===//
//
// Part of the CUDA Toolkit, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef __cuda_std__
#define __cuda_std__

#ifdef __CUDACC__
    #if defined(__clang__)
        #include <cuda_fp16.h>
        #define __fp16 __half
    #endif
    #if defined(__FLT16_MANT_DIG__)
        #include <cuda_fp16.h>
        #define _Float16 __half
    #endif
#else
    #include <cuda_runtime_api.h>
#endif

#ifdef _MSC_VER
    #undef __cpp_lib_transparent_operators
#endif

// request these outcomes
#define _LIBCPP_NO_AUTO_LINK
#ifndef _LIBCPP_NO_EXCEPTIONS
    #define _LIBCPP_NO_EXCEPTIONS
#endif
#ifndef _LIBCPP_NO_RTTI
    #define _LIBCPP_NO_RTTI
#endif
#define _LIBCPP_HAS_NO_INT128
#define _LIBCPP_FREESTANDING
#define _LIBCPP_HAS_NO_THREAD_CONTENTION_TABLE
#define _LIBCPP_HAS_NO_PLATFORM_WAIT
#define _LIBCPP_HAS_CLOCK_API_EXTERNAL
#ifndef _LIBCUDACXX_HAS_TREE_BARRIER
    #define _LIBCPP_HAS_NO_BARRIER_BUTTERFLY
#endif
#ifdef __CUDACC_RTC__
    #define __ELF__
    #define _LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER
    #define _LIBCPP_HAS_THREAD_API_EXTERNAL
    #define __alignof(x) alignof(x)
#endif
#define _LIBCPP_HAS_EXTERNAL_ATOMIC_IMP

#if defined(__PGIC__) && defined(__linux__)
    #define __ELF__
#endif

#include "libcxx/include/__config"

#if _GNUC_VER <= 409
    #define _LIBCPP_CUDA_HAS_NO_HOST_STD_ATOMIC_INIT
#endif

// force this outcome
#undef _LIBCPP_ATOMIC_FLAG_TYPE
#define _LIBCPP_ATOMIC_FLAG_TYPE int
#undef _LIBCPP_INLINE_VISIBILITY
#define _LIBCPP_INLINE_VISIBILITY __host__ __device__

#ifndef _LIBCPP_ABI_UNSTABLE
#  define _LIBCPP_ABI_UNSTABLE
#endif

#ifndef _LIBCPP_CUDA_ABI_VERSION
#  define _LIBCPP_CUDA_ABI_VERSION 1
#endif

#ifndef _LIBCPP_CUDA_ABI_NAMESPACE
#  define _LIBCPP_CUDA_ABI_NAMESPACE _LIBCPP_CONCAT(__,_LIBCPP_CUDA_ABI_VERSION)
#endif

#ifndef _LIBCPP_BEGIN_NAMESPACE_CUDA
#  define _LIBCPP_BEGIN_NAMESPACE_CUDA \
      namespace cuda { inline namespace _LIBCPP_CUDA_ABI_NAMESPACE {
#endif
#ifndef _LIBCPP_END_NAMESPACE_CUDA
#  define _LIBCPP_END_NAMESPACE_CUDA } }
#endif

// redefine namespace std::
#undef _LIBCPP_BEGIN_NAMESPACE_STD
#define _LIBCPP_BEGIN_NAMESPACE_STD \
  namespace cuda { namespace std { inline namespace _LIBCPP_CUDA_ABI_NAMESPACE {
#undef _LIBCPP_END_NAMESPACE_STD
#define _LIBCPP_END_NAMESPACE_STD } } }
#undef _VSTD
#define _VSTD cuda::std::_LIBCPP_CUDA_ABI_NAMESPACE
#undef _LIBCPP_BEGIN_NAMESPACE_STD_NOVERSION
#define _LIBCPP_BEGIN_NAMESPACE_STD_NOVERSION namespace cuda { namespace std {
#undef _LIBCPP_END_NAMESPACE_STD_NOVERSION
#define _LIBCPP_END_NAMESPACE_STD_NOVERSION } }

#endif //__cuda_std__
