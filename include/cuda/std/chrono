//===----------------------------------------------------------------------===//
//
// Part of the CUDA Toolkit, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#ifndef _CUDA_CHRONO
#define _CUDA_CHRONO

#ifndef __CUDACC_RTC__
    #include <chrono>
#endif //__CUDACC_RTC__

#include "ctime"
#include "type_traits"
#include "ratio"
#include "limits"
#include "version"

#include "detail/__config"

#include "detail/libcxx/include/chrono"

_LIBCUDACXX_BEGIN_NAMESPACE_STD

namespace chrono {

class _LIBCUDACXX_TYPE_VIS system_clock
{
public:
    typedef nanoseconds                      duration;
    typedef duration::rep                    rep;
    typedef duration::period                 period;
    typedef chrono::time_point<system_clock> time_point;
    static _LIBCUDACXX_CONSTEXPR_AFTER_CXX11 const bool is_steady = false;

    inline _LIBCUDACXX_INLINE_VISIBILITY
    static time_point now() _NOEXCEPT
    {
#ifdef __CUDA_ARCH__
        uint64_t time;
        asm volatile("mov.u64  %0, %globaltimer;":"=l"(time)::);
        return time_point(nanoseconds(time));
#else
        return time_point(nanoseconds(
                ::std::chrono::duration_cast<::std::chrono::nanoseconds>(
                    ::std::chrono::system_clock::now().time_since_epoch()
                ).count()
               ));
#endif
    }
    inline _LIBCUDACXX_INLINE_VISIBILITY
    static time_t to_time_t(const time_point& __t) _NOEXCEPT
    {
        return time_t(duration_cast<seconds>(__t.time_since_epoch()).count());
    }
    inline _LIBCUDACXX_INLINE_VISIBILITY
    static time_point from_time_t(time_t __t) _NOEXCEPT
    {
        return time_point(seconds(__t));;
    }
};

using steady_clock = system_clock;
using high_resolution_clock = steady_clock;

#if _LIBCUDACXX_STD_VER > 17

template <class _Duration>
using sys_time    = time_point<system_clock, _Duration>;
using sys_seconds = sys_time<seconds>;
using sys_days    = sys_time<days>;

#endif

}

_LIBCUDACXX_END_NAMESPACE_STD

#endif //_CUDA_CHRONO


