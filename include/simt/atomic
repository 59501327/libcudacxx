/*

Copyright (c) 2018, NVIDIA Corporation

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

#ifndef _SIMT_ATOMIC
#define _SIMT_ATOMIC

#ifndef __CUDACC_RTC__
    #include <atomic>
    static_assert(ATOMIC_BOOL_LOCK_FREE == 2, "");
    static_assert(ATOMIC_CHAR_LOCK_FREE == 2, "");
    static_assert(ATOMIC_CHAR16_T_LOCK_FREE == 2, "");
    static_assert(ATOMIC_CHAR32_T_LOCK_FREE == 2, "");
    static_assert(ATOMIC_WCHAR_T_LOCK_FREE == 2, "");
    static_assert(ATOMIC_SHORT_LOCK_FREE == 2, "");
    static_assert(ATOMIC_INT_LOCK_FREE == 2, "");
    static_assert(ATOMIC_LONG_LOCK_FREE == 2, "");
    static_assert(ATOMIC_LLONG_LOCK_FREE == 2, "");
    static_assert(ATOMIC_POINTER_LOCK_FREE == 2, "");
#endif //__CUDACC_RTC__

#include "cstddef"
#include "cstdint"
#include "type_traits"
#include "version"

#include "details/__config"

#if !defined(__CUDA_ARCH__) && defined(_MSC_VER)

    // Windows, CPU side

namespace simt { namespace std { inline namespace v1 {

typedef ::std::memory_order memory_order;

static constexpr memory_order memory_order_relaxed = ::std::memory_order_relaxed;
static constexpr memory_order memory_order_release = ::std::memory_order_release;
static constexpr memory_order memory_order_acq_rel = ::std::memory_order_acq_rel;
static constexpr memory_order memory_order_acquire = ::std::memory_order_acquire;
static constexpr memory_order memory_order_consume = ::std::memory_order_consume;
static constexpr memory_order memory_order_seq_cst = ::std::memory_order_seq_cst;

template<class _Tp>
using atomic = ::std::atomic<_Tp>;

using atomic_flag = ::std::atomic_flag;

template<class _S = int>
static inline void atomic_thread_fence_simt(memory_order __m, _S = _S()) {
    ::std::atomic_thread_fence(__m);
}

static inline void atomic_signal_fence_simt(memory_order __m) {
    ::std::atomic_signal_fence(__m);
}

} } }

#else //!defined(__CUDA_ARCH__) && defined(_MSC_VER) 

    // Everything else

#include "details/__atomic"

#undef ATOMIC_BOOL_LOCK_FREE
#undef ATOMIC_BOOL_LOCK_FREE
#undef ATOMIC_CHAR_LOCK_FREE
#undef ATOMIC_CHAR16_T_LOCK_FREE
#undef ATOMIC_CHAR32_T_LOCK_FREE
#undef ATOMIC_WCHAR_T_LOCK_FREE
#undef ATOMIC_SHORT_LOCK_FREE
#undef ATOMIC_INT_LOCK_FREE
#undef ATOMIC_LONG_LOCK_FREE
#undef ATOMIC_LLONG_LOCK_FREE
#undef ATOMIC_POINTER_LOCK_FREE
#undef ATOMIC_FLAG_INIT
#undef ATOMIC_VAR_INIT

#define _LIBCPP_CXX03_LANG
#define atomic_thread_fence atomic_thread_fence_simt
#define atomic_signal_fence atomic_signal_fence_simt

#ifdef __CUDA_ARCH__
    #undef _LIBCPP_HAS_GCC_ATOMIC_IMP
    #define _LIBCPP_HAS_C_ATOMIC_IMP
#endif

#include "../libcxx/include/atomic"

#undef _LIBCPP_CXX03_LANG
#undef atomic_thread_fence
#undef atomic_signal_fence

#endif //!defined(__CUDA_ARCH__) && defined(_MSC_VER)

#ifdef _MSC_VER
    #pragma warning(push)
    #pragma warning(disable:4522)
#endif //_MSC_VER

namespace simt { inline namespace v1 {

using system = details::__memory_scope_system;
using device = details::__memory_scope_device;
using block = details::__memory_scope_block;

typedef std::memory_order memory_order;

static constexpr memory_order memory_order_relaxed = std::memory_order_relaxed;
static constexpr memory_order memory_order_release = std::memory_order_release;
static constexpr memory_order memory_order_acq_rel = std::memory_order_acq_rel;
static constexpr memory_order memory_order_acquire = std::memory_order_acquire;
static constexpr memory_order memory_order_consume = std::memory_order_consume;
static constexpr memory_order memory_order_seq_cst = std::memory_order_seq_cst;

#if !defined(__CUDA_ARCH__) && defined(_MSC_VER)
    #define __h_atomic_base(_T,_S) ::std::atomic<_T>
#else
    #define __h_atomic_base(_T,_S) std::__atomic_base<_T, _S>
#endif

// atomic<T>

template <class _Tp, class _Sco = system>
struct atomic
    : public __h_atomic_base(_Tp, _Sco)
{
    typedef __h_atomic_base(_Tp, _Sco) __base;
    __host__ __device__
    atomic() noexcept : __base() {}
    __host__ __device__
    constexpr atomic(_Tp __d) noexcept : __base(__d) {}

    __host__ __device__
    _Tp operator=(_Tp __d) volatile noexcept
        {__base::store(__d); return __d;}
    __host__ __device__
    _Tp operator=(_Tp __d) noexcept
        {__base::store(__d); return __d;}
};

// atomic<T*>

template <class _Tp, class _Sco>
struct atomic<_Tp*, _Sco>
    : public __h_atomic_base(_Tp*, _Sco)
{
    typedef __h_atomic_base(_Tp*, _Sco) __base;
    __host__ __device__
    atomic() noexcept : __base() {}
    __host__ __device__
    constexpr atomic(_Tp* __d) noexcept : __base(__d) {}

    __host__ __device__
    _Tp* operator=(_Tp* __d) volatile noexcept
        {__base::store(__d); return __d;}
    __host__ __device__
    _Tp* operator=(_Tp* __d) noexcept
        {__base::store(__d); return __d;}

    __host__ __device__
    _Tp* fetch_add(ptrdiff_t __op, memory_order __m = memory_order_seq_cst)
                                                                        volatile noexcept
        {return __cxx_atomic_fetch_add(&this->__a_, __op, __m);}
    __host__ __device__
    _Tp* fetch_add(ptrdiff_t __op, memory_order __m = memory_order_seq_cst) noexcept
        {return __cxx_atomic_fetch_add(&this->__a_, __op, __m);}
    __host__ __device__
    _Tp* fetch_sub(ptrdiff_t __op, memory_order __m = memory_order_seq_cst)
                                                                        volatile noexcept
        {return __cxx_atomic_fetch_sub(&this->__a_, __op, __m);}
    __host__ __device__
    _Tp* fetch_sub(ptrdiff_t __op, memory_order __m = memory_order_seq_cst) noexcept
        {return __cxx_atomic_fetch_sub(&this->__a_, __op, __m);}

    __host__ __device__
    _Tp* operator++(int) volatile noexcept            {return fetch_add(1);}
    __host__ __device__
    _Tp* operator++(int) noexcept                     {return fetch_add(1);}
    __host__ __device__
    _Tp* operator--(int) volatile noexcept            {return fetch_sub(1);}
    __host__ __device__
    _Tp* operator--(int) noexcept                     {return fetch_sub(1);}
    __host__ __device__
    _Tp* operator++() volatile noexcept               {return fetch_add(1) + 1;}
    __host__ __device__
    _Tp* operator++() noexcept                        {return fetch_add(1) + 1;}
    __host__ __device__
    _Tp* operator--() volatile noexcept               {return fetch_sub(1) - 1;}
    __host__ __device__
    _Tp* operator--() noexcept                        {return fetch_sub(1) - 1;}
    __host__ __device__
    _Tp* operator+=(ptrdiff_t __op) volatile noexcept {return fetch_add(__op) + __op;}
    __host__ __device__
    _Tp* operator+=(ptrdiff_t __op) noexcept          {return fetch_add(__op) + __op;}
    __host__ __device__
    _Tp* operator-=(ptrdiff_t __op) volatile noexcept {return fetch_sub(__op) - __op;}
    __host__ __device__
    _Tp* operator-=(ptrdiff_t __op) noexcept          {return fetch_sub(__op) - __op;}
};

template<class _S = system>
inline __host__ __device__ void atomic_thread_fence_simt(memory_order __m, _S __s = _S()) {
#ifdef __CUDA_ARCH__
    details::v1::__atomic_thread_fence_simt(__m, __s);
#else
    std::atomic_thread_fence_simt(__m);
#endif
}

inline __host__ __device__ void atomic_signal_fence_simt(memory_order __m) {
#ifdef __CUDA_ARCH__
    details::v1::__atomic_signal_fence_simt(__m);
#else
    std::atomic_signal_fence_simt(__m);
#endif
}

} }

#ifdef _MSC_VER
    #pragma warning(pop)
#endif //_MSC_VER

#endif //_SIMT_ATOMIC
