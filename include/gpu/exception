/*

Copyright (c) 2018, NVIDIA Corporation
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#ifndef _GPU_EXCEPTION
#define _GPU_EXCEPTION

#include <exception>

namespace gpu { namespace std { inline namespace v1 {

    using exception = ::std::exception;
    using bad_exception = ::std::bad_exception;
    using nested_exception = ::std::nested_exception;

    using unexpected_handler = ::std::unexpected_handler;
    inline unexpected_handler get_unexpected() noexcept { 
        return ::std::get_unexpected(); }
    inline unexpected_handler set_unexpected(unexpected_handler f) noexcept  { 
        return ::std::set_unexpected(f); }
    [[noreturn]] inline void unexpected() {
        ::std::unexpected(); }
 
    using terminate_handler = ::std::terminate_handler;
    inline terminate_handler get_terminate() noexcept { 
        return ::std::get_terminate(); }
    inline terminate_handler set_terminate(terminate_handler f) noexcept { 
        return ::std::set_terminate(f); }
    [[noreturn]] inline void terminate() noexcept { 
        ::std::terminate(); }
 
    inline bool uncaught_exception() noexcept { 
        return ::std::uncaught_exception(); }
 
    using exception_ptr = ::std::exception_ptr;
    inline exception_ptr current_exception() noexcept { 
        return ::std::current_exception(); }
    [[noreturn]] inline void rethrow_exception(exception_ptr p) { 
        ::std::rethrow_exception(p); }
    template<class E> inline exception_ptr make_exception_ptr(E e) noexcept { 
        return ::std::make_exception_ptr(e); }
 
    template <class T> [[noreturn]] inline void throw_with_nested(T&& t) { 
        ::std::throw_with_nested(t); }
    template <class E> inline void rethrow_if_nested(const E& e) { 
        ::std::rethrow_if_nested(e); }

} } }

#endif //_GPU_EXCEPTION
